// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createTodoByClerkID = `-- name: CreateTodoByClerkID :exec
INSERT INTO "todos" (user_id, title, description, status, created_at, updated_at)
VALUES ((SELECT user_id FROM users WHERE clerk_id = $1),
        $2, $3, $4, NOW(), NOW())
`

type CreateTodoByClerkIDParams struct {
	ClerkID     string
	Title       string
	Description *string
	Status      string
}

func (q *Queries) CreateTodoByClerkID(ctx context.Context, arg CreateTodoByClerkIDParams) error {
	_, err := q.db.Exec(ctx, createTodoByClerkID,
		arg.ClerkID,
		arg.Title,
		arg.Description,
		arg.Status,
	)
	return err
}

const getTodoByClerkID = `-- name: GetTodoByClerkID :many
SELECT todos.todo_id, todos.user_id, todos.title, todos.description, todos.status, todos.created_at, todos.updated_at
FROM todos
JOIN users ON todos.user_id = users.user_id
WHERE users.clerk_id = $1
`

func (q *Queries) GetTodoByClerkID(ctx context.Context, clerkID string) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodoByClerkID, clerkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.TodoID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
